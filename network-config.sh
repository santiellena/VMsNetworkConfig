#!/bin/bash

#Colours
greenColour="\e[0;32m\033[1m"
endColour="\033[0m\e[0m"
redColour="\e[0;31m\033[1m"
blueColour="\e[0;34m\033[1m"
yellowColour="\e[0;33m\033[1m"
purpleColour="\e[0;35m\033[1m"
turquoiseColour="\e[0;36m\033[1m"
grayColour="\e[0;37m\033[1m"

trap ctrl_c INT

function ctrl_c(){
  echo -e "\n${redColour}[+] Exiting config script...${endColour}"
  tput cnorm ;exit 1
}

function manual_use(){
  echo -e "\n${yellowColour}--------Manual of Use--------${endColour}"
  echo -e "\n\n${blueColour}-i [STRING] ${endColour}${redColour}(mandatory)${endColour}${blueColour}: ${endColour}${grayColour}Introduce as parameter the interface you want to configure.${endColour}"
  echo -e "\n${blueColour}-g [NUMBER] ${redColour}(mandatory)${endColour}${blueColour}: ${endColour}${grayColour}Introduce as parameter the third octet of your local host machine.${endColour}"
  echo -e "\n${blueColour}-d [NUMBER] ${yellowColour}(optional)${endColour}${blueColour}: ${endColour}${grayColour}Introduce the fourth octet you would like to have in your IPv4 address, in case the one you gave${endColour}" 
  echo -e "\t\t\t${grayColour}is already in use, a random octect(1-255) will be assigned.${endColour}"
  echo -e "\n\n${yellowColour}--------End of Manual of Use--------${endColour}"
}

function configure(){
  tput civis
  interface_name=$1
  gateway_num=$(echo $2 | grep -E "^[0-9]+([.][0-9]+)?$")  
  ip_num=$(echo $3 | grep -E "^[0-9]+([.][0-9]+)?$") 

  interface_match=$(ifconfig | grep $interface_name | awk '{print $1}' | tr -d ':')
  
  echo -e "\n\n${yellowColour}--------Network Interface Configuration Service--------${endColour}"

  if [ $interface_match ]; then
    if [ $gateway_num ]; then
      if ! [ $gateway_num -gt 1 ] || ! [ $gateway_num -lt 255 ]; then
        echo -e "\n${redColour}[!] The \"-g\" flag must receive a number in the interval: (1-255)...${endColour}"
        tput cnorm; exit 1
      fi
    else
      echo -e "${redColour}[!] The \"-g\" flag argument must be a number!${endColour}"
      tput cnorm; exit 1
    fi
    if [ $ip_num ]; then
      if ! [ $ip_num -gt 1 ] || ! [ $ip_num -lt 255 ]; then
        echo -e "\n${redColour}[!] The \"-d\" flag must receive a number in the interval: (1-255)...${endColour}"
        tput cnorm; exit 1
      fi
    else
      echo -e "${redColour}[!] The \"-d\" flag argument must be a number!${endColour}"
      tput cnorm; exit 1
    fi
    
    # Killing DCHP router process
    pkill dhclient 2>/dev/null

    # Activating network interface
    ifconfig $interface_name up 2>/dev/null

    # Giving the interface its IPv4 address and netmask
    ifconfig $interface_name "192.168.$gateway_num.$ip_num" netmask "255.255.255.0"
    
    # Adding the gateway (matches with local host machine's gateway)
    route add default gw "192.168.$gateway_num.1" 2>/dev/null
    
    # Configuring DNS resolutions
    echo "#Generated by Configuration Script" > /etc/resolv.conf 2>/dev/null
    echo "nameserver 8.8.8.8" >> /etc/resolv.conf 2>/dev/null
    echo "nameserver 1.1.1.1" >> /etc/resolv.conf 2>/dev/null

    # Configuring Network Interface 
    echo "auto $interface_name" > /etc/network/interfaces 2>/dev/null
    echo "iface $interface_name inet static" >> /etc/network/interfaces 2>/dev/null
    echo -e "\t\taddress 192.168.$gateway_num.$ip_num" >> /etc/network/interfaces 2>/dev/null
    echo -e "\t\tnetmask 255.255.255.0" >> /etc/network/interfaces 2>/dev/null
    echo -e "\t\tgateway 192.168.$gateway_num.1" >> /etc/network/interfaces 2>/dev/null
    echo -e "\t\tdns-nameservers 8.8.8.8" >> /etc/network/interfaces 2>/dev/null
 
  else 
    echo -e "\n${redColour}[!] There is no such interaface in your machine, try with a valid interface...${endColour}"
    tput cnorm ; exit 1
  fi

  echo -e "\n\n${greenColour}[ ÔêÆ ] Your network interface \"$interface_name\" has ben successfully configured!${endColour}"
  
  echo -e "\n\n${yellowColour}--------Service Stopped--------${endColour}"

  tput cnorm
}

function configureRandomly(){
  tput civis
  interface_name=$1
  gateway_num=$2 
  
  echo -e "\n${redColour}[!]${endColour}${turquoiseColour} I'm sorry, this functionality is not yet available...${endColour}"

  tput cnorm
}

declare -i flag_i=0
declare -i flag_g=0 
declare -i flag_d=0
declare -i parameter_check=0

while getopts "i:g:d:h" arg; do
		case $arg in
			i) interface_name=$OPTARG; let flag_i+=1;;
      g) gateway_num=$OPTARG; let flag_g+=1;;
      d) ip_num=$OPTARG; let flag_d+=1;;
			h) manual_use; let parameter_check+=1;;
		esac
done
 
if [ "$(id -u)" == "0" ]; then
  if [ $flag_i -eq 1 ] && [ $flag_g -eq 1 ]; then
    if [ $flag_d -eq 1 ]; then
      configure $interface_name $gateway_num $ip_num
    else
      configureRandomly $interface_name $gateway_num
    fi
  elif [ $parameter_check -eq 0 ]; then
    echo -e "\n${redColour}[+] Invalid execution, check the manual of use...${endColour}"
    manual_use
  fi
else
  echo -e "\n\n${redColour}[!]${endColour}${grayColour} You need to be the ${endColour}${redColour}root${endColour} ${grayColour}user to use this tool!${endColour}\n"
fi
